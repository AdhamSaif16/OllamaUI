{"uid":"715b8a454441e0d1","name":"test_send_message","fullName":"tests.test_example.ExampleTestCase#test_send_message","historyId":"bc0daafa71c28502aa82c75f36d34738","time":{"start":1757259595459,"stop":1757259607286,"duration":11827},"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55c5ac2a508a <unknown>\n#1 0x55c5abd44a70 <unknown>\n#2 0x55c5abd96907 <unknown>\n#3 0x55c5abd96b01 <unknown>\n#4 0x55c5abde4d54 <unknown>\n#5 0x55c5abdbc40d <unknown>\n#6 0x55c5abde214f <unknown>\n#7 0x55c5abdbc1b3 <unknown>\n#8 0x55c5abd8859b <unknown>\n#9 0x55c5abd89971 <unknown>\n#10 0x55c5ac26a25b <unknown>\n#11 0x55c5ac26dfa9 <unknown>\n#12 0x55c5ac251339 <unknown>\n#13 0x55c5ac26eb58 <unknown>\n#14 0x55c5ac235c1f <unknown>\n#15 0x55c5ac292118 <unknown>\n#16 0x55c5ac2922f6 <unknown>\n#17 0x55c5ac2a4066 <unknown>\n#18 0x7f135669caa4 <unknown>\n#19 0x7f1356729c3c <unknown>","statusTrace":"self = <test_example.ExampleTestCase testMethod=test_send_message>\n\n    def test_send_message(self):\n        self.home.open(OLLAMA_URL)\n        # self.home.select_gemma3()\n        self.home.send_message(\"Hello! Can you help me with Python?\")\n>       self.assertEqual(self.home.get_sent_message(), \"Hello! Can you help me with Python?\")\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/test_example.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/home_page.py:33: in get_sent_message\n    return self.get_text(self.SENT_MESSAGE)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npages/base_page.py:19: in get_text\n    return self.wait.until(EC.presence_of_element_located(locator)).text\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"acf44399d08700d10df6cdb2ef7d696a\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x7f89a907bb00>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55c5ac2a508a <unknown>\nE       #1 0x55c5abd44a70 <unknown>\nE       #2 0x55c5abd96907 <unknown>\nE       #3 0x55c5abd96b01 <unknown>\nE       #4 0x55c5abde4d54 <unknown>\nE       #5 0x55c5abdbc40d <unknown>\nE       #6 0x55c5abde214f <unknown>\nE       #7 0x55c5abdbc1b3 <unknown>\nE       #8 0x55c5abd8859b <unknown>\nE       #9 0x55c5abd89971 <unknown>\nE       #10 0x55c5ac26a25b <unknown>\nE       #11 0x55c5ac26dfa9 <unknown>\nE       #12 0x55c5ac251339 <unknown>\nE       #13 0x55c5ac26eb58 <unknown>\nE       #14 0x55c5ac235c1f <unknown>\nE       #15 0x55c5ac292118 <unknown>\nE       #16 0x55c5ac2922f6 <unknown>\nE       #17 0x55c5ac2a4066 <unknown>\nE       #18 0x7f135669caa4 <unknown>\nE       #19 0x7f1356729c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_unittest_setUpClass_fixture_ExampleTestCase","time":{"start":1757259587145,"stop":1757259587145,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"testStage":{"status":"broken","statusMessage":"selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x55c5ac2a508a <unknown>\n#1 0x55c5abd44a70 <unknown>\n#2 0x55c5abd96907 <unknown>\n#3 0x55c5abd96b01 <unknown>\n#4 0x55c5abde4d54 <unknown>\n#5 0x55c5abdbc40d <unknown>\n#6 0x55c5abde214f <unknown>\n#7 0x55c5abdbc1b3 <unknown>\n#8 0x55c5abd8859b <unknown>\n#9 0x55c5abd89971 <unknown>\n#10 0x55c5ac26a25b <unknown>\n#11 0x55c5ac26dfa9 <unknown>\n#12 0x55c5ac251339 <unknown>\n#13 0x55c5ac26eb58 <unknown>\n#14 0x55c5ac235c1f <unknown>\n#15 0x55c5ac292118 <unknown>\n#16 0x55c5ac2922f6 <unknown>\n#17 0x55c5ac2a4066 <unknown>\n#18 0x7f135669caa4 <unknown>\n#19 0x7f1356729c3c <unknown>","statusTrace":"self = <test_example.ExampleTestCase testMethod=test_send_message>\n\n    def test_send_message(self):\n        self.home.open(OLLAMA_URL)\n        # self.home.select_gemma3()\n        self.home.send_message(\"Hello! Can you help me with Python?\")\n>       self.assertEqual(self.home.get_sent_message(), \"Hello! Can you help me with Python?\")\n                         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\ntests/test_example.py:35: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \npages/home_page.py:33: in get_sent_message\n    return self.get_text(self.SENT_MESSAGE)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\npages/base_page.py:19: in get_text\n    return self.wait.until(EC.presence_of_element_located(locator)).text\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"acf44399d08700d10df6cdb2ef7d696a\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x7f89a907bb00>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x55c5ac2a508a <unknown>\nE       #1 0x55c5abd44a70 <unknown>\nE       #2 0x55c5abd96907 <unknown>\nE       #3 0x55c5abd96b01 <unknown>\nE       #4 0x55c5abde4d54 <unknown>\nE       #5 0x55c5abdbc40d <unknown>\nE       #6 0x55c5abde214f <unknown>\nE       #7 0x55c5abdbc1b3 <unknown>\nE       #8 0x55c5abd8859b <unknown>\nE       #9 0x55c5abd89971 <unknown>\nE       #10 0x55c5ac26a25b <unknown>\nE       #11 0x55c5ac26dfa9 <unknown>\nE       #12 0x55c5ac251339 <unknown>\nE       #13 0x55c5ac26eb58 <unknown>\nE       #14 0x55c5ac235c1f <unknown>\nE       #15 0x55c5ac292118 <unknown>\nE       #16 0x55c5ac2922f6 <unknown>\nE       #17 0x55c5ac2a4066 <unknown>\nE       #18 0x7f135669caa4 <unknown>\nE       #19 0x7f1356729c3c <unknown>\n\n/opt/hostedtoolcache/Python/3.11.13/x64/lib/python3.11/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException","steps":[{"name":"Test metadata","time":{"start":1757259595459,"stop":1757259595459,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"attachments":[],"parameters":[],"stepsCount":1,"shouldDisplayMessage":true,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},"afterStages":[{"name":"_unittest_setUpClass_fixture_ExampleTestCase::0","time":{"start":1757259607317,"stop":1757259607317,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"browser","value":"chrome"},{"name":"resolution","value":"chrome-laptop"},{"name":"screen","value":"1366x768"},{"name":"environment","value":"staging"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_example"},{"name":"subSuite","value":"ExampleTestCase"},{"name":"host","value":"pkrvm7jw40e0xgp"},{"name":"thread","value":"2573-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_example"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'chrome'"},{"name":"environment","value":"'staging'"},{"name":"resolution","value":"'chrome-laptop'"},{"name":"screen","value":"'1366x768'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"715b8a454441e0d1.json","parameterValues":["'chrome'","'staging'","'chrome-laptop'","'1366x768'"]}