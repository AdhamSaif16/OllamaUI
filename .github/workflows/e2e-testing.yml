name: E2E Testing (Deploy only)

on:
  pull_request:
    branches: [ main, master]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Build & push OllamaUI image
      run: |
        echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
        TAG="${{ github.sha }}-$(date +%Y%m%d-%H%M%S)"
        docker build -t "${{ secrets.DOCKERHUB_USERNAME }}/ollama-ui:${TAG}" .
        docker push "${{ secrets.DOCKERHUB_USERNAME }}/ollama-ui:${TAG}"
        echo "IMAGE_TAG=${TAG}" >> $GITHUB_ENV

    - name: Copy docker-compose.yml to EC2
      uses: appleboy/scp-action@v0.1.7
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        source: "docker-compose.yml"
        target: "/home/ubuntu/"

    - name: Deploy on EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ubuntu
        key: ${{ secrets.EC2_SSH_KEY }}
        script: |
          set -euo pipefail
          cd /home/ubuntu

          # Optional DockerHub login (useful if repos are private)
          if [ -n "${{ secrets.DOCKERHUB_USERNAME }}" ] && [ -n "${{ secrets.DOCKERHUB_PASSWORD }}" ]; then
            echo "${{ secrets.DOCKERHUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKERHUB_USERNAME }}" --password-stdin
          fi

          # Stop previous stack (ignore if not running)
          docker compose down || true

           # HARD RESET: remove any problematic hidden .env (root-owned / immutable)
          sudo chattr -i .env 2>/dev/null || true
          sudo rm -f .env 2>/dev/null || true
          # sanity: prove it's gone
          [ -e .env ] && { echo ".env still present"; ls -la .env; exit 1; } || echo "No .env present"
          cat > compose.env <<'EOF'

          # Images
          YOLO_IMAGE=${{ vars.YOLO_IMAGE }}
          OLLAMA_UI_IMAGE=${{ secrets.DOCKERHUB_USERNAME }}/ollama-ui:${{ env.IMAGE_TAG }}

          # Ports
          YOLO_PORT=${{ vars.YOLO_PORT || '8080' }}
          OLLAMA_UI_PORT=${{ vars.OLLAMA_UI_PORT || '3000' }}

          # Service URLs
          YOLO_SERVICE=${{ vars.YOLO_SERVICE || 'http://yolo:8080' }}
          OLLAMA_URL=${{ vars.OLLAMA_URL || 'http://localhost:11434' }}

          # AWS config (mounted ~/.aws on EC2 will provide credentials)
          AWS_REGION=${{ vars.AWS_REGION || 'eu-west-1' }}
          AWS_S3_BUCKET=${{ vars.AWS_S3_BUCKET || 'adhamsaif16' }}
          EOF

          chmod 644 compose.env
          chown ubuntu:ubuntu compose.env || true
          echo "compose.env ready:"; ls -l compose.env; head -n 6 compose.env || true
          # --- FREE SPACE: prune unused Docker data (safe) ---
          echo ">> Disk usage BEFORE prune"
          docker system df || true

          # Stop stack (already done just above, keep it)
          docker compose down || true

          # Remove stopped containers, dangling images, unused networks, and build cache
          docker container prune -f || true
          docker image prune -af || true
          docker volume prune -f || true
          docker builder prune -af || true
          docker system prune -af || true

          echo ">> Disk usage AFTER prune"
          docker system df || true
          # --- end cleanup ---

          # Show the resolved image (debug)
          docker compose --env-file ./compose.env config | grep -nE 'image:|services:|ollama-ui' || true

          # Pull the exact images referenced by compose.env
          docker compose --env-file ./compose.env pull || true

          # Force-recreate only the UI service with the new tag (no deps restart)
          docker compose --env-file ./compose.env up -d --force-recreate --no-deps ollama-ui

          # Verify the running image tag
          docker ps --format '{{.Names}}\t{{.Image}}' | grep ollama-ui || true

          # Basic health checks (adjust as needed)
          sleep 8
          docker ps
          curl -fsS http://localhost:${{ vars.OLLAMA_UI_PORT || '3000' }} >/dev/null || (echo "UI not responding" && exit 1)
