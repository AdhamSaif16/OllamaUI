# .github/workflows/advanced-ui-testing.yaml
name: Advanced Selenium UI Tests

on:
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to test against'
        required: true
        default: 'staging'
        type: choice
        options: [development, staging, production]

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  selenium-matrix-tests:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        browser: [chrome, firefox]
        resolution:
          - { name: 'desktop-full', width: 1920, height: 1080 }
          - { name: 'laptop',       width: 1366, height: 768 }
          - { name: 'mobile',       width: 375,  height: 667 }

    name: Test ${{ matrix.browser }} - ${{ matrix.resolution.name }}

    steps:
      - name: Checkout tests repo
        uses: actions/checkout@v4
        with:
          fetch-depth: 1
          repository: AdhamSaif16/OllamaUITesting
          token: ${{ secrets.UI_TESTING_GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          # make sure requirements.txt includes: selenium, pytest, allure-pytest

      # --- NEW: read the real running images/tags from EC2 for Allure env ---
      - name: Fetch running images from EC2
        shell: bash
        run: |
          set -euo pipefail
          echo "${{ secrets.EC2_SSH_KEY }}" > id_ci.pem
          chmod 600 id_ci.pem
          SSH="ssh -o StrictHostKeyChecking=no -i id_ci.pem ubuntu@${{ secrets.EC2_HOST }}"

          OLLAMA_IMAGE=$($SSH "docker ps --filter name=ollama-ui --format '{{.Image}}' | head -n1" || true)
          YOLO_IMAGE=$($SSH "docker ps --filter name=yolo --format '{{.Image}}' | head -n1" || true)
          POSTGRES_IMAGE=$($SSH "docker ps --filter name=postgres --format '{{.Image}}' | head -n1" || true)

          OLLAMA_VERSION="${OLLAMA_IMAGE##*:}"; [ -n "$OLLAMA_IMAGE" ] || OLLAMA_VERSION="unknown"
          YOLO_VERSION="${YOLO_IMAGE##*:}";     [ -n "$YOLO_IMAGE" ]   || YOLO_VERSION="unknown"
          if [[ -n "$POSTGRES_IMAGE" && "$POSTGRES_IMAGE" == *:* ]]; then
            POSTGRES_VERSION="${POSTGRES_IMAGE##*:}"
          else
            POSTGRES_VERSION="unknown"
          fi

          {
            echo "OLLAMA_IMAGE=${OLLAMA_IMAGE:-unknown}"
            echo "YOLO_IMAGE=${YOLO_IMAGE:-unknown}"
            echo "POSTGRES_IMAGE=${POSTGRES_IMAGE:-unknown}"
            echo "OLLAMA_VERSION=${OLLAMA_VERSION:-unknown}"
            echo "YOLO_VERSION=${YOLO_VERSION:-unknown}"
            echo "POSTGRES_VERSION=${POSTGRES_VERSION:-unknown}"
          } >> "$GITHUB_ENV"

          echo ">>> Running images on EC2"
          echo "OLLAMA_IMAGE=$OLLAMA_IMAGE"
          echo "YOLO_IMAGE=$YOLO_IMAGE"
          echo "POSTGRES_IMAGE=$POSTGRES_IMAGE"

      - name: Create Allure environment.properties
        run: |
          mkdir -p allure-results
          cat > allure-results/environment.properties <<EOF
          Test.Framework=Selenium+Pytest
          CI.Platform=GitHub Actions
          Test.Types=UI Automation
          Browsers=Chrome, Firefox
          Resolutions=Desktop (1920x1080), Laptop (1366x768), Mobile (375x667)
          Target.URL=http://${{ secrets.EC2_HOST }}:${{ vars.OLLAMA_UI_PORT || '3000' }}/

          Ollama.Version=${OLLAMA_VERSION}
          Ollama.Image=${OLLAMA_IMAGE}
          YOLO.Version=${YOLO_VERSION}
          YOLO.Image=${YOLO_IMAGE}
          Postgres.Version=${POSTGRES_VERSION}
          EOF

      # If you prefer manual browser installs, keep these. Otherwise Selenium Manager
      # in Selenium 4 auto-manages drivers and you can safely remove them.
      - name: Install Chrome and ChromeDriver (optional)
        if: matrix.browser == 'chrome'
        run: |
          sudo apt-get update
          sudo apt-get install -y google-chrome-stable || true

      - name: Install Firefox & GeckoDriver (optional)
        if: matrix.browser == 'firefox'
        run: |
          sudo apt-get update
          sudo apt-get install -y wget tar || true
          sudo snap remove firefox || true
          wget -O firefox.tar.xz "https://download.mozilla.org/?product=firefox-latest&os=linux64&lang=en-US"
          tar xJf firefox.tar.xz
          sudo mv firefox /opt/firefox
          sudo ln -sf /opt/firefox/firefox /usr/local/bin/firefox
          wget -q https://github.com/mozilla/geckodriver/releases/latest/download/geckodriver-v0.36.0-linux64.tar.gz
          tar -xzf geckodriver-v0.36.0-linux64.tar.gz
          sudo mv geckodriver /usr/local/bin/
          sudo chmod +x /usr/local/bin/geckodriver

      - name: Run Selenium tests
        env:
          HEADLESS: true
          BROWSER: ${{ matrix.browser }}
          SCREEN_WIDTH: ${{ matrix.resolution.width }}
          SCREEN_HEIGHT: ${{ matrix.resolution.height }}
          OLLAMA_URL: http://${{ secrets.EC2_HOST }}:${{ vars.OLLAMA_UI_PORT || '3000' }}/
          TEST_NAME: ${{ matrix.browser }}-${{ matrix.resolution.name }}
          ENVIRONMENT: ${{ github.event.inputs.environment || 'staging' }}
          WAIT_TIMEOUT: "30"   # a bit more time for mobile
        run: |
          mkdir -p allure-results
          pytest --alluredir=allure-results tests/

      - name: Upload Allure results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: allure-results-${{ matrix.browser }}-${{ matrix.resolution.name }}
          path: allure-results/
          retention-days: 30

  allure-report:
    runs-on: ubuntu-latest
    needs: selenium-matrix-tests
    if: always()

    steps:
      - name: Checkout (for Pages branch)
        uses: actions/checkout@v4

      - name: Download all Allure results
        uses: actions/download-artifact@v4
        with:
          pattern: allure-results-*
          path: allure-results-downloaded
          merge-multiple: false

      - name: Merge Allure result directories
        run: |
          mkdir -p allure-results
          for dir in allure-results-downloaded/*/; do
            [ -d "$dir" ] && cp -r "$dir"* allure-results/ 2>/dev/null || true
          done

      - name: Generate Allure report
        uses: simple-elf/allure-report-action@master
        with:
          allure_results: allure-results
          allure_report: allure-report
          gh_pages: gh-pages
          allure_history: allure-history
          keep_reports: 20

      - name: Deploy to GitHub Pages
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.UI_TESTING_GITHUB_TOKEN }}
          publish_dir: allure-history
